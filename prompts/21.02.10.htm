<html>
<head>
  <meta charset="UTF-8">
  <title>INFO 3300 - Feb 10</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>

</head>
<body>
  <div class="container larger">
    <h3>Prompt for Wednesday, February 10</h3>
    <p>
    	HW1 will soon be available on CMS. You will receive CMS access shortly before HW1 is released.
    </p>
    <p>
      You can access these files from the <a href="https://github.com/jeffrz/info3300-sp2021">course Github repository</a> Here is an <a href="http://rogerdudler.github.io/git-guide/">informal guide to git</a>.
    </p>
    <p>
      To develop efficiently, have a local web server running. Python has a simple, built-in server. Use <tt>python -m http.server</tt> for python 3; use <tt>python -m SimpleHTTPServer 8000</tt> for python 2 (execute "python" in cmd for version number). You probably have python 3.
    </p>
    <p>
      We will be working in Javascript for most of the term. It can act pretty oddly, especially in comparison to languages that strictly type objects. <br/>
      What are some of the unusual aspects of this language? Open a console in your browser...
    </p>
    <p>
      Time permitting, let's also review <a href="http://www.json.org">Javascript Object Notation</a>.
    </p>
    
    <svg width=100 height=100> <rect id="rectangle" x=10 y=10 width=80 height=80 fill="steelblue" /> </svg>
    
    
    <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
    <h5>Code for today:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
      <code id="display2" class="hljs javascript">
      </code>
    </pre>


    <!--- Code for today's class --->
    <script id="notes1">

      // Try pasting these commands into your browser console
      
      // Console.log is our friend
      console.log('Hello World');
      

      // Let's explore some Javascript types!
      console.log("--- Checking out some types ---")
      console.log(typeof(1));

      console.log( typeof( new Object() ));

      console.log( new Object() ); //objects are also dictionaries in js 

      console.log( typeof((true)));5

      console.log( typeof( console.log )); //functions are still objects, weird 

      console.log( typeof( list)); // no notion of array in js, type is still object but there is an array (and has extra property of length)
      //everything except for numbers and strings are objects 
      //there is a notion of a function type 
      //booleans also work 
    
      let dict = {'a':1, 'b':2,'c':3}; //shows all dictionaries are objects 

      console.log(dict);
      console.log(typeof(dict));

      list['newKey']="hello";
      console.log(list['newKey']);

      //every obj can also function as dictionary?
      
      // Learn a bit more about Objects
      // console.log("--- Testing [] and {} ---")

      //two different types of "nothingness", there's null and there's undefined 

      console.log(typeof(null)); //null is a type but still returns object 
      console.log(typeof(undefined)); //more frequently occuring 
      
      

      
      // So what can accept keys?
      // console.log("--- So what works like a dict? ---");
      // let differentTypes = [3, "hello", new Object(), [1,2,3], function(x) {}, console];
      // for (let item of differentTypes) {
      //   console.log( item, typeof(item) );
      //   item['test'] = "keyAdded";
      //   console.log( item['test'] ); 
      // } 
      
      console.log(3==3);

    
      
      // Types can get a bit unexpected in JS
      // console.log("--- Now exploring type coercion ---")
      
      //when comparing disimilar types, will turn one into the other type to compare
      console.log(0=='0'); //will return true 

      console.log("1"+2); //produce 12 
      
      console.log(4+true); //5 bc true turns into 1 

      console.log(true+false); //1 bc saw the plus sign, coerced both into numbers 

      console.log("true"+false); //truefalse 

      console.log([1,2,3]+4); //array was converted into string and added to 4, no exceptions ever thrown 

      let color = "red";

      document.getElementById("rectangle").setAttribute("fill", color)
      
      // Why does this matter?
      
      //can creep forward and cause silent errors that you don't expect 
      
      
      // Comparison weirdness
      // console.log("--- Now trying some comparisons ---")
      //comparisons are not free of type error 
      console.log((true+1) =="2");
      console.log([]==0); //empty list also coerced into empty 0 which returns true 
      console.log([1]==true); //also true bc one element array coerces to 1 and so does true 

      console.log([[[[[]]]]]==[]); //no coercision happens bc it is same type, thus returns false 

      //explicit comparison is made with three ===, instructs JS to not do coercsion sooo
      //ALWAYS USE THREE EQUAL SIGNS 

      // null, undefined, NaN

      console.log(null===0); //not equal 
      console.log(null===undefined); //now no longer same thing 
      console.log(NaN===NaN);
      
      

      // Shortcircuiting of logical statements
      // console.log("--- Shortcircuiting ---");

      console.log("shortcircuit")
      
      true || console.log("logged-or") || false; //if JS shorts, will see true and stop, if does not, will keep running 

      if (thing !== undefined && thing.property === 'somthing'); //can also short circuit logical statement 

      //undefined returns itself for type of, but type of (null) returns object 

      //this matters bc type coercision can creep in with unexpected effects

    </script>


    <script id="notes2">
    
      // How do two script tags interact with each other?
      let test = "script tags. how do they work?";
      
      
      // * Let's talk JSON
      
      

      // let obj = [{"name":"DDWA", "number":3300 },{"name": "Java", "number": 2110},{"name": "Python", "number": 1110}];
      // console.log(obj);
      


      // This one won't parse because it breaks JSON specifications
      // let badStr = '{"list": ["commas,", "single_quo\'tes", "double_quo"tes", "@sÃ§i|"], "nestedObject": {"undefined": undefined, "defined": 3.1415926535}, "Infinity": Infinity, "NaN": NaN, "bool": true}'
      
      
      
      

    </script>
    
    
    
    
    

    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
    document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
    document.getElementById("display2").innerText = document.getElementById("notes2").innerText;
    hljs.initHighlightingOnLoad();
    </script>

  </div>
</body>
</html>
